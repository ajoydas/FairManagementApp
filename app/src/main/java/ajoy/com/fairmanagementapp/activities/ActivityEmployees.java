package ajoy.com.fairmanagementapp.activities;

import android.app.Dialog;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.util.Base64;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RadioGroup;
import android.widget.SearchView;
import android.widget.TextView;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import ajoy.com.fairmanagementapp.adapters.AdapterEmployees;
import ajoy.com.fairmanagementapp.extras.AsyncResponse;
import ajoy.com.fairmanagementapp.callbacks.EmployeeLoadedListener;
import ajoy.com.fairmanagementapp.logging.L;
import ajoy.com.fairmanagementapp.materialtest.R;
import ajoy.com.fairmanagementapp.pojo.Employee;
import ajoy.com.fairmanagementapp.task.TaskLoadEmployees;

public class ActivityEmployees extends AppCompatActivity /*implements*//* AsyncResponse,*//* EmployeeLoadedListener*//*, SwipeRefreshLayout.OnRefreshListener*/ {

    //The key used to store arraylist of movie objects to and from parcelable
    //the arraylist containing our list of box office his
    protected ArrayList<Employee> mListEmployees;
    //the adapter responsible for displaying our movies within a RecyclerView
    private AdapterEmployees mAdapter;
    //for refresh listener
    private SwipeRefreshLayout mSwipeRefreshLayout;

    //the TextView containing error messages generated by Volley
    //the sorter responsible for sorting our movie results based on choice made by the user in the FAB
    private String search;

    private boolean res = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_employees);

        /*Toolbar mToolbar = (Toolbar) findViewById(R.id.app_bar);
        setSupportActionBar(mToolbar);

        SearchView searchView = (SearchView) findViewById(R.id.searchViewEmployee);

        *//*searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                search = query;
                searchResult();
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                search = newText;
                return false;
            }
        });*//*

        System.out.println("Outside refresh");
        *//*mSwipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.swipeEmployees);
        mSwipeRefreshLayout.setOnRefreshListener(this);*//*

        System.out.println("Outside recycle view");
        RecyclerView mRecyclerEmployees = (RecyclerView) findViewById(R.id.listEmployees);
        //set the layout manager before trying to display data
        mRecyclerEmployees.setLayoutManager(new LinearLayoutManager(this));
        mAdapter = new AdapterEmployees(this);
        mRecyclerEmployees.setAdapter(mAdapter);

        System.out.println("Outside taskloading");

        new TaskLoadEmployees(this, ActivityFair.fair.getDb_name(), ActivitySeller.stall.getStall(), null).execute();
        //update your Adapter to containg the retrieved movies

        System.out.println("Outside adapter");
        mAdapter.setEmployees(mListEmployees);

        System.out.println("Outside recycle click");
        mRecyclerEmployees.addOnItemTouchListener(new RecyclerTouchListener(this, mRecyclerEmployees, new ClickListener() {
            @Override
            public void onClick(View view, int position) {
                //editDialogShow(position);
            }

            @Override
            public void onLongClick(View view, int position) {

            }
        }));

*/
    }


    /*private void searchResult() {
        new TaskLoadEmployees(this, ActivityFair.fair.getDb_name(), ActivitySeller.stall.getStall(), search).execute();
    }
*//*
    boolean isImageFitToScreen = false;

    //Employee Details dialog
    private void editDialogShow(final int position) {
        final Dialog dialog = new Dialog(this);
        dialog.setTitle("Employee Details");
        dialog.setContentView(R.layout.dialog_employees_details);
        final TextView employeeName = (TextView) dialog.findViewById(R.id.employeename);
        final TextView employeedescription = (TextView) dialog.findViewById(R.id.employeedescription);
        final TextView employeecontactno = (TextView) dialog.findViewById(R.id.employeecontactno);
        final TextView employeeposition = (TextView) dialog.findViewById(R.id.employeeposition);
        final TextView employeesalary = (TextView) dialog.findViewById(R.id.employeesalary);

        employeeName.setText(mListEmployees.get(position).getName());
        employeedescription.setText(mListEmployees.get(position).getDescription());
        employeecontactno.setText(mListEmployees.get(position).getContact_no());
        employeeposition.setText(mListEmployees.get(position).getPosition());
        employeesalary.setText(mListEmployees.get(position).getSalary());

        System.out.println("Salary  " + mListEmployees.get(position).getSalary());

        dialog.show();
        Button bcancel = (Button) dialog.findViewById(R.id.bcancel);
        Button bdelete = (Button) dialog.findViewById(R.id.bdelete);
        final Button bedit = (Button) dialog.findViewById(R.id.bedit);

        bcancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                L.t(getApplicationContext(), "Request Canceled");
                dialog.cancel();
            }
        });

        bdelete.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

        bedit.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
    }*//*

    int pos;

    *//*private void getLocation(String name){


        class GetLocation extends AsyncTask<Void, Void, Boolean> {
            public AsyncResponse delegate = null;

            private String stall;
            public GetLocation(String stall) {
                this.stall = stall;
            }

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
            }


            @Override
            protected void onPostExecute(Boolean result) {
                super.onPostExecute(result);
                delegate.processFinish(result);
            }

            @Override
            protected Boolean doInBackground(Void... params) {

                Integer result=0;
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    String Url = ActivityFair.url + ActivityFair.fair.getDb_name();
                    Connection con = DriverManager.getConnection(Url, ActivityFair.username, ActivityFair.password);
                    System.out.println("Connected");

                    PreparedStatement st = con.prepareStatement("Select location,stall_name from stalls where stall=?");

                    st.setString(1, stall);

                    System.out.println("Statement");

                    ResultSet rs = null;

                    rs = st.executeQuery();

                    while (rs.next())
                    {
                        location = rs.getString("location");
                        stallname = rs.getString("stall_name");
                        System.out.println(location+" "+stallname);
                        return  true;
                    }

                } catch (ClassNotFoundException | SQLException e) {
                    e.printStackTrace();
                    return false;
                }

                return false;
            }
        }

        GetLocation ui = new GetLocation(name);
        ui.delegate = this;
        ui.execute();
    }

    @Override
    public void processFinish(Boolean output) {
        if(output) {
            if(mListEmployees.get(pos).getEmployee_name()!=null) {
                Intent i = new Intent(this, ActivityEmployeeMap.class);
                i.putExtra("Location", location);
                i.putExtra("Stallname", stallname);
                i.putExtra("Image", mListEmployees.get(pos).getEmployee_name());
                startActivity(i);
            }
            else
            {
                Intent i = new Intent(this, ActivityStallMap.class);
                i.putExtra("Location", location);
                i.putExtra("Stallname", stallname);
                startActivity(i);
            }
        }
        else {
            L.t(this, "Connection Error");
        }

    }*//*

    @Override
    public void onEmployeeLoaded(ArrayList<Employee> listEmployees) {

        *//*if (mSwipeRefreshLayout.isRefreshing()) {
            mSwipeRefreshLayout.setRefreshing(false);
        }*//*
        mListEmployees = listEmployees;
        mAdapter.setEmployees(listEmployees);
    }


    *//*@Override
    public void onRefresh() {
        L.t(this, "onRefresh");
        //load the whole feed again on refresh, dont try this at home :)
        new TaskLoadEmployees(this, ActivityFair.fair.getDb_name(), ActivitySeller.stall.getStall(), null).execute();

    }*//*

    //Click listener for Add Button

    public void bsearchemployees(View view) {
        InputMethodManager inputManager = (InputMethodManager)
                this.getSystemService(Context.INPUT_METHOD_SERVICE);

        inputManager.hideSoftInputFromWindow(this.getCurrentFocus().getWindowToken(),
                InputMethodManager.HIDE_NOT_ALWAYS);

        searchResult();
    }

    public void addEmployeeClicked(View view) {
        //addDialogShow();
    }


    private void addDialogShow() {
        final Dialog dialog = new Dialog(this);
        dialog.setTitle("Add Employee");
        dialog.setContentView(R.layout.dialog_add_employee);
        final EditText employeeName = (EditText) dialog.findViewById(R.id.addemployeename);
        final EditText employeedescription = (EditText) dialog.findViewById(R.id.addemployeedescription);
        final EditText employeecontactno = (EditText) dialog.findViewById(R.id.addemployeecontactno);
        final EditText employeeposition = (EditText) dialog.findViewById(R.id.addemployeeposition);
        final EditText employeesalary = (EditText) dialog.findViewById(R.id.addemployeesalary);


        dialog.show();
        Button bcancel = (Button) dialog.findViewById(R.id.bcancel);
        final Button bsave = (Button) dialog.findViewById(R.id.bsave);

        bcancel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                L.t(getApplicationContext(), "Request Canceled");
                dialog.cancel();
            }
        });

        bsave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
               *//* Employee temp = new Employee();
                temp.setId(0);
                temp.setStall("");
                temp.setName(employeeName.getText().toString());
                temp.setDescription(employeedescription.getText().toString());
                temp.setContact_no(employeecontactno.getText().toString());
                temp.setPosition(employeeposition.getText().toString());
                temp.setSalary(employeesalary.getText().toString());

                if (temp.getName().equals("") || temp.getName() == null) {
                    L.t(getApplication(), "Name can't be empty!");
                } else {
                    //addEmployee(temp);
                }*//*
            }
        });
    }

*//*
    private void addEmployee(Employee temp) {


        class AddEmployee extends AsyncTask<Void, Void, Boolean> {
            public AsyncResponse delegate = null;

            public AddEmployee(Employee temp) {
                this.temp = temp;
            }

            private Employee temp;

            @Override
            protected void onPreExecute() {
                super.onPreExecute();
            }


            @Override
            protected void onPostExecute(Boolean result) {
                super.onPostExecute(result);
                delegate.processFinish(result);
            }

            @Override
            protected Boolean doInBackground(Void... params) {

                Integer result = 0;
                try {
                    Class.forName("com.mysql.jdbc.Driver");
                    String Url = ActivityFair.url + ActivityFair.fair.getDb_name();
                    Connection con = DriverManager.getConnection(Url, ActivityFair.username, ActivityFair.password);
                    System.out.println("Connected");

                    PreparedStatement st = con.prepareStatement("INSERT INTO employees" +
                            "(stall,name,description,contact_no,position,salary)" +
                            "VALUES" +
                            "(?,?,?,?,?,?)");

                    st.setString(1, ActivitySeller.stall.getStall());
                    st.setString(2, temp.getName());
                    st.setString(3, temp.getDescription());
                    st.setString(4, temp.getContact_no());
                    st.setString(5, temp.getPosition());
                    st.setString(6, temp.getSalary());
                    System.out.println("Statement");

                    ResultSet rs = null;
                    int row = 0;
                    row = st.executeUpdate();

                    if (row == 1) {
                        return true;
                    }

                } catch (ClassNotFoundException | SQLException e) {
                    e.printStackTrace();
                    return false;
                }
                return false;
            }
        }

        AddEmployee ui = new AddEmployee(temp);
        ui.delegate = this;
        ui.execute();
    }

    @Override
    public void processFinish(Boolean output) {
        if (output) {
            L.t(this, "Saved Successfully");
            new TaskLoadEmployees(this, ActivityFair.fair.getDb_name(), ActivitySeller.stall.getStall(), null).execute();
            mAdapter.notifyDataSetChanged();
        } else {
            L.t(this, "Connection Error");
        }

    }*//*

    //Touch
    public static interface ClickListener {
        public void onClick(View view, int position);

        public void onLongClick(View view, int position);
    }

    static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {

        private GestureDetector gestureDetector;
        private ClickListener clickListener;

        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {
            this.clickListener = clickListener;
            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
                @Override
                public boolean onSingleTapUp(MotionEvent e) {
                    return true;
                }

                @Override
                public void onLongPress(MotionEvent e) {
                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                    if (child != null && clickListener != null) {
                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));
                    }
                }
            });
        }

        @Override
        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {

            View child = rv.findChildViewUnder(e.getX(), e.getY());
            if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {
                clickListener.onClick(child, rv.getChildPosition(child));
            }
            return false;
        }

        @Override
        public void onTouchEvent(RecyclerView rv, MotionEvent e) {
        }

    }

*/
}
