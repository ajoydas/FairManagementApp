package ajoy.com.fairmanagementapp.fragments;

import android.app.SearchManager;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.v4.app.Fragment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.view.GestureDetector;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.SearchView;
import android.widget.TextView;

import java.util.ArrayList;

import ajoy.com.fairmanagementapp.activities.ActivityFair;
import ajoy.com.fairmanagementapp.adapters.AdapterProducts;
import ajoy.com.fairmanagementapp.callbacks.ProductLoadedListener;
import ajoy.com.fairmanagementapp.extras.ProductSorter;
import ajoy.com.fairmanagementapp.extras.SortListener;
import ajoy.com.fairmanagementapp.logging.L;
import ajoy.com.fairmanagementapp.materialtest.MyApplication;
import ajoy.com.fairmanagementapp.materialtest.R;
import ajoy.com.fairmanagementapp.pojo.Product;
import ajoy.com.fairmanagementapp.task.TaskLoadProducts;


/**
 * Created by ajoy on 5/24/16.
 */
public class FragmentSearchProducts extends Fragment /*implements SortListener, ProductLoadedListener, SwipeRefreshLayout.OnRefreshListener*/{

    private static SearchView searchView;
    private static RadioGroup radioGroup;

    //The key used to store arraylist of movie objects to and from parcelable
    private static final String STATE_PRODUCTS = "state_products";
    //the arraylist containing our list of box office his
    protected ArrayList<Product> mListProducts;
    //the adapter responsible for displaying our movies within a RecyclerView
    private AdapterProducts mAdapter;
    //for refresh listener
    private SwipeRefreshLayout mSwipeRefreshLayout;

    //the recyclerview containing showing all our movies
    private RecyclerView mRecyclerProducts;
    //the TextView containing error messages generated by Volley
    private TextView mTextError;
    //the sorter responsible for sorting our movie results based on choice made by the user in the FAB
    private ProductSorter mSorter = new ProductSorter();


    public static FragmentSearchProducts newInstance(String param1, String param2) {
        FragmentSearchProducts fragment = new FragmentSearchProducts();
        Bundle args = new Bundle();
        fragment.setArguments(args);
        return fragment;
    }


    @Override
    public void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
    }

    @Nullable
    @Override
    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        final View layout = inflater.inflate(R.layout.fragment_search_products, container, false);

        searchView= (SearchView) layout.findViewById(R.id.searchView);

        radioGroup= (RadioGroup) layout.findViewById(R.id.searchViewRadio);
        radioGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener()
        {
            @Override
            public void onCheckedChanged(RadioGroup group, int checkedId) {
                // checkedId is the RadioButton selected
                if (checkedId==R.id.byName)searchView.setQueryHint("Search by Name");
                else searchView.setQueryHint("Search by Author/Company");
            }
        });

        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                //if(query.equals("author"))searchView.setQueryHint("Search by author");
                //L.t(getActivity(),query);
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                //L.t(getActivity(),newText);
                /*int button=radioGroup.getCheckedRadioButtonId();
                //RadioButton radioButton= (RadioButton) layout.findViewById(button);
                if(button==R.id.byName)L.t(getActivity(),newText);*/
                return false;
            }
        });


        /*mSwipeRefreshLayout = (SwipeRefreshLayout) layout.findViewById(R.id.swipeProducts);
        mSwipeRefreshLayout.setOnRefreshListener(this);


        mRecyclerProducts = (RecyclerView) layout.findViewById(R.id.listProducts);
        //set the layout manager before trying to display data
        mRecyclerProducts.setLayoutManager(new LinearLayoutManager(getActivity()));
        mAdapter = new AdapterProducts(getActivity());
        mRecyclerProducts.setAdapter(mAdapter);

        if (savedInstanceState != null) {
            //if this fragment starts after a rotation or configuration change, load the existing movies from a parcelable
            mListProducts = savedInstanceState.getParcelableArrayList(STATE_PRODUCTS);
        } else {
            //if this fragment starts for the first time, load the list of movies from a database
            mListProducts = MyApplication.getWritableDatabaseProduct().readProducts();
            //if the database is empty, trigger an AsycnTask to download movie list from the web
            if (mListProducts.isEmpty()) {
                L.m("FragmentUpcoming: executing task from fragment");
                new TaskLoadProducts(this).execute();

            }
        }
        //update your Adapter to containg the retrieved movies
        mAdapter.setProducts(mListProducts);
*/

        return layout;
    }




    /*public void onSortByName() {
        mSorter.sortProductsByName(mListProducts);
        mAdapter.notifyDataSetChanged();
    }


    //Todo fix SortListener

    @Override
    public void onSortByDate() {
        mSorter.sortProductsByPrice(mListProducts);
        mAdapter.notifyDataSetChanged();
    }

    @Override
    public void onSortByRating() {

    }


    @Override
    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        mRecyclerProducts.addOnItemTouchListener(new RecyclerTouchListener(getActivity(), mRecyclerProducts, new ClickListener() {
            @Override
            public void onClick(View view, int position) {

                Intent i = new Intent(MyApplication.getAppContext(),ActivityFair.class);
                i.putExtra("Url","https://www.google.com/maps/d/edit?mid=1lGcLL7WSCrilqiBQLTeXetjgIOI");
                startActivity(i);
            }

            @Override
            public void onLongClick(View view, int position) {

            }
        }));
    }

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        //save the movie list to a parcelable prior to rotation or configuration change
        outState.putParcelableArrayList(STATE_PRODUCTS, mListProducts);
    }


    @Override
    public void onProductLoaded(ArrayList<Product> listProducts) {

        if (mSwipeRefreshLayout.isRefreshing()) {
            mSwipeRefreshLayout.setRefreshing(false);
        }

        mAdapter.setProducts(listProducts);
    }

    @Override
    public void onRefresh() {
        L.t(getActivity(), "onRefresh");
        //load the whole feed again on refresh, dont try this at home :)
        new TaskLoadProducts(this).execute();

    }


    //Touch
    public static interface ClickListener {
        public void onClick(View view, int position);

        public void onLongClick(View view, int position);
    }

    static class RecyclerTouchListener implements RecyclerView.OnItemTouchListener {

        private GestureDetector gestureDetector;
        private ClickListener clickListener;

        public RecyclerTouchListener(Context context, final RecyclerView recyclerView, final ClickListener clickListener) {
            this.clickListener = clickListener;
            gestureDetector = new GestureDetector(context, new GestureDetector.SimpleOnGestureListener() {
                @Override
                public boolean onSingleTapUp(MotionEvent e) {
                    return true;
                }

                @Override
                public void onLongPress(MotionEvent e) {
                    View child = recyclerView.findChildViewUnder(e.getX(), e.getY());
                    if (child != null && clickListener != null) {
                        clickListener.onLongClick(child, recyclerView.getChildPosition(child));
                    }
                }
            });
        }

        @Override
        public boolean onInterceptTouchEvent(RecyclerView rv, MotionEvent e) {

            View child = rv.findChildViewUnder(e.getX(), e.getY());
            if (child != null && clickListener != null && gestureDetector.onTouchEvent(e)) {
                clickListener.onClick(child, rv.getChildPosition(child));
            }
            return false;
        }

        @Override
        public void onTouchEvent(RecyclerView rv, MotionEvent e) {
        }

        @Override
        public void onRequestDisallowInterceptTouchEvent(boolean disallowIntercept) {

        }
    }*/

}























